//Functions declaration
bool hasLooked = false;
int bulbsLit;
int newPosition;
int chairID;
int chairs;
moveChair(chairs, chairID, newPosition, bulbsLit);


//Entering the dining room. These are the descriptions of the dining room that way the player understands the layout and important info.
void dining_room() {
    std::cout << "You push open the grand dining room doors. A big gust of wind follows you and stirs up all the dust that had settled over the furniture.\n";
    std::cout << "You can spot massive cobwebs in the corner of the rooms and all over the chandelier that's in the middle of the room. \nYou wonder how long its been since a living soul has stepped into this room.\n";
    std::cout<<"Besides the chandelier, a table of 8 is set for what looks like a grand dinner.\n Most of the plate settings are still set on the table, but not all of them.\n";
    std::cout<< "There are 3 plate settings that are strewn about the floor. You question what happened in this house.\n";
    std::cout<<"You also note that the chairs are askew. One chair is pushed against the window as if someone had attempted to escape.\n";
    std::cout<<"You have this urge to explore this room, whether to find out more clues about happened, or figure out a way to get out.";
}

//The player can look around the room. This is for the purpose of the hint, so the player knows in which order the chairs go in.
void lookAround() {
    cout << "\nOn the wall you immediately notice the huge, dusty painting. It looks like the family sitting down in the dining room.\n"
        <<"You touch the picture to rub off some of the dust and a cold chill comes over your shoulder and down your back.\n";
    cout<<"After some of the dust is wiped off, you note that the chairs are in a certain order. The picture looks odd because its a top down view of the dining table.\n";
    cout<<"There are two chairs, one at each head of the table, with dusty arm rests.\n";
cout<<"You count going counter clockwise, from the top of the table, starting from 1. You count 8 chairs. From your count, chairs 1 and 5 are at the heads of the tables [captain chairs]. 2,3,4,6,7,8 are surround them.\n";
    cout<<"You take note that chair 2, 5 and 8 are missing their plate settings and 8 is the chair you see pushed against the window. You know it's 8, because 7 is still in it's spot.\n";
    cout<<"But, you look back at the scene in front of you and realize that if you want to find out how to escape, you need to put them in the right order [Hint: most of the chairs are in the moved from their original spot].";
    hasLooked = true;

}

//The dining room puzzle
/* The objective: The player has to move the chair in a certain order around the table to get the music note that is required at the end.
 *The hint for the correct order is in a painting on the wall. The chairs will be in the correct position and based off of the description details that the player
 *sees in the beginning plus when they look at the painting, should give them context clues on how to move the chairs.
 *If you're looking at a top-down view of the dining table, the chair positions start at 1 and go counter-clockwise, counting to 8.
 * The chair's positions when the player finds them the first time is:
* Chair 3= chair 1 position, Chair 4=Chair 2 position, Chair 7 = Chair 3 position,	Chair 2 = Chair 4 position,	Chair 5 = Chair 5 position (the only correct one)
	Chair 1= Chair 6 position, Chair 8 = Chair 7 position, Chair 6 = Chair 8 position

In addition to the chairs, the chandelier will slowly light up, till it's completely lit up and then slowly fade to blackness.
 */

// Function declarations for the chair structures
struct Chair {
    int id;
    int current_position;
    int correct_position;
    std::string special_identifier;
    bool is_correct; // Track if the chair is already placed correctly

};


// This is to initialize the chairs. You have the what's the current position, the correct and any special identifiers.
bool initializeChairs(Chair chairs[8]) {
    chairs[0] = {1, 3, 1, "captain seat with arms", false}; //One head of the table
    chairs[1] = {2, 4, 2, "missing plate setting", false};
    chairs[2] = {3, 7, 3, "", false};
    chairs[3] = {4, 2, 4, "", false};
    chairs[4] = {5, 5, 5, "captain seat with arms",false}; //The other head of the table
    chairs[5] = {6, 1, 6, "",false};
    chairs[6] = {7, 8, 7, "",false};
    chairs[7] = {8, 6, 8, "missing plate setting, pushed against the window",false};


    //Function to move the chairs. It takes user input.
    while (true) {
        std::cout << "\nEnter the chair number (1-8) you want to move: ";
        int chairID, newPosition;

        std::cin >> chairID;
        if (std::cin.fail() || chairID < 1 || chairID > 8) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid input! Please enter a valid chair number (1-8).\n";
            continue;
        }

        std::cout << "Enter the new position (1-8): ";
        std::cin >> newPosition;
        if (std::cin.fail() || newPosition < 1 || newPosition > 8) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid input! Please enter a valid position (1-8).\n";
            continue;
        }
    }
}



        // Function to move a chair and update chandelier
void movechair(Chair chairs[], int chairID, int newPosition, int &bulbsLit) {
    for (int i = 0; i < 8; ++i) {
        if (chairs[i].id == chairID) {
            chairs[i].current_position = newPosition;
            std::cout << "Chair " << chairID << " moved to position " << newPosition << ".\n";

            // Check if it's correctly placed and hasn't already been counted
            if (chairs[i].current_position == chairs[i].correct_position && !chairs[i].is_correct) {
                chairs[i].is_correct = true;
                bulbsLit++; // Light up one more bulb
                std::cout << "Chair " << chairID << " is now correctly placed!\n";
                std::cout << "A light bulb has lit up on the chandelier! (Bulbs lit: " << bulbsLit << "/8)\n";
            }
            return;
        }
    }
    std::cout << "Invalid chair ID!\n";
}

//Function to check the chandelier (and the completion of the puzzle)
void checkAllCorrect(int bulbsLit) {
    if (bulbsLit == 8) {
        std::cout << "\nThe chandelier is **fully lit**! ðŸŽµ Ding! You solved the puzzle!\n";
        std::cout << "As you step out of the room, you hear whispers of laughing, dishes clinking, and clear enjoyment of a grand dinner ... ";
        std::cout << "the chandelier fades into darkness.\n";

        // Reset bulbsLit (if needed)
        bulbsLit = 0;
    }
}
